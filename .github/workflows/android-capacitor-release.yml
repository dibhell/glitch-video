name: Build Android Release (Capacitor, signed)

on:
  workflow_dispatch:
    inputs:
      app_id:
        description: "Android Application ID (package)"
        required: false
        default: "com.example.glitch"
      app_name:
        description: "App name (launcher title)"
        required: false
        default: "Glitch Video"
      web_dir:
        description: "Directory with built web assets (dist/build/out) or 'auto'"
        required: false
        default: "auto"
      node_version:
        description: "Node.js version"
        required: false
        default: "20"
      build_target:
        description: "What to build: apk | aab | both"
        required: false
        default: "both"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ inputs.node_version }}

      - name: Install JS deps
        run: |
          if [ -f package-lock.json ]; then npm ci; else npm i; fi

      - name: Build web app
        id: web
        run: |
          if npm run | grep -qE "[[:space:]]build"; then npm run build; fi
          if [ "${{ inputs.web_dir }}" = "auto" ]; then
            for d in dist build out; do
              if [ -d "$d" ]; then echo "web_dir=$d" >> $GITHUB_OUTPUT; exit 0; fi
            done
            echo "::error::Could not find 'dist' or 'build' or 'out'."; exit 1
          else
            if [ -d "${{ inputs.web_dir }}" ]; then echo "web_dir=${{ inputs.web_dir }}" >> $GITHUB_OUTPUT
            else echo "::error::Provided web_dir does not exist"; exit 1; fi
          fi

      - name: Install Capacitor tooling
        run: |
          npm i -D @capacitor/cli@latest
          npm i @capacitor/core@latest @capacitor/android@latest

      - name: Generate capacitor.config.json
        run: |
          APP_ID="${{ inputs.app_id }}"
          APP_NAME="${{ inputs.app_name }}"
          WEB_DIR="${{ steps.web.outputs.web_dir }}"
          cat > capacitor.config.json <<JSON
          {
            "appId": "${APP_ID}",
            "appName": "${APP_NAME}",
            "webDir": "${WEB_DIR}",
            "bundledWebRuntime": false
          }
          JSON

      - name: Add Android platform & sync
        run: |
          npx cap add android || true
          npx cap copy
          npx cap sync

      - name: Setup JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Accept Android licenses
        run: yes | sdkmanager --licenses

      - name: Cache Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Restore keystore from secrets
        working-directory: android/app
        env:
          KS_B64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
        run: |
          if [ -z "$KS_B64" ]; then echo "::error::ANDROID_KEYSTORE_BASE64 is empty"; exit 1; fi
          echo "$KS_B64" | base64 -d > release.keystore || { echo "::error::Base64 decode failed"; exit 1; }
          ls -l release.keystore

      - name: Write keystore.properties
        working-directory: android/app
        env:
          KS_PWD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          KEY_PWD: ${{ secrets.ANDROID_KEY_PASSWORD }}
        run: |
          cat > keystore.properties <<PROP
          storeFile=app/release.keystore
          storePassword=${KS_PWD}
          keyAlias=${KEY_ALIAS}
          keyPassword=${KEY_PWD}
          PROP
          cat keystore.properties

      - name: Patch app/build.gradle for release signing
        working-directory: android/app
        run: |
          cat >> build.gradle <<'GRADLE'
          def ksPropsFile = rootProject.file("app/keystore.properties")
          if (ksPropsFile.exists()) {
              def ksProps = new Properties()
              ksProps.load(new FileInputStream(ksPropsFile))
              android {
                  signingConfigs {
                      release {
                          storeFile file(ksProps['storeFile'])
                          storePassword ksProps['storePassword']
                          keyAlias ksProps['keyAlias']
                          keyPassword ksProps['keyPassword']
                      }
                  }
                  buildTypes {
                      release {
                          signingConfig signingConfigs.release
                          minifyEnabled false
                      }
                  }
              }
          }
          GRADLE
          echo "Applied signing config"

      - name: Build release artifacts
        working-directory: android
        run: |
          case "${{ inputs.build_target }}" in
            apk)  ./gradlew :app:assembleRelease --stacktrace ;;
            aab)  ./gradlew :app:bundleRelease   --stacktrace ;;
            both) ./gradlew :app:assembleRelease :app:bundleRelease --stacktrace ;;
            *)    ./gradlew :app:assembleRelease :app:bundleRelease --stacktrace ;;
          esac

      - name: Upload APK
        if: ${{ inputs.build_target == 'apk' || inputs.build_target == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release-apk
          path: android/app/build/outputs/apk/release/app-release.apk

      - name: Upload AAB
        if: ${{ inputs.build_target == 'aab' || inputs.build_target == 'both' }}
        uses: actions/upload-artifact@v4
        with:
          name: app-release-aab
          path: android/app/build/outputs/bundle/release/app-release.aab
